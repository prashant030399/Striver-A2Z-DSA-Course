Given an array arr[] containing integers and an integer k, 
your task is to find the length of the longest subarray where the sum of its elements is equal to the given value k. 
It is guaranteed that a valid subarray exists.

Brute................

class Solution {
    public int lenOfLongestSubarr(int[] arr, int k) {
    
int len =0;
for(int i=0; i<=arr.length-1 ; i++){
    for(int j=i ; j<=arr.length -1 ; j++){
        int s=0 ;
        for(int z=i ; z<=j ; z++){
         s += arr[z] ;
        }
        if(s==k) len = Math.max(len,j-i+1);
    }
}
    
    return len;
    

    }
}


Better...................

class Solution {
    public int lenOfLongestSubarr(int[] arr, int k) {

int len =0;
for(int i=0; i<=arr.length-1 ; i++){
      int s=0 ;
      
    for(int j=i ; j<=arr.length -1 ; j++){
      
         s += arr[j] ;
      
        if(s==k) len = Math.max(len,j-i+1);
    }
}
    
    return len;
    
    }
}



    Optimised..............

class Solution {
    public int lenOfLongestSubarr(int[] arr, int k) {
    
Map<Integer, Integer> mpp = new HashMap<>();
    
    int sum = 0 ;
    int maxlen = 0;
    
    for(int i=0 ; i<=arr.length -1  ; i++){
        
         sum += arr[i];
         
         if(sum == k){
             maxlen = Math.max(maxlen,i+1); 
         }
         
         int rem = sum - k;
         
         if(mpp.containsKey(rem)){
             int len = i- mpp.get(rem);
             maxlen = Math.max(maxlen,len);
         }
        
        if(!mpp.containsKey(sum)){
            mpp.put(sum,i);
        }
         
    }

    return maxlen;

    

    }
}    

    
