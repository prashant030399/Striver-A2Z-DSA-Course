Given an array arr containing both positive and negative integers, the task is to compute the length of the largest subarray that has a sum of 0.

Brute

class Solution {
    int maxLen(int arr[]) {
        
        int maxlen = 0;
        
        for(int i=0 ; i<=arr.length -1 ; i++ ){
            
            int sum = 0;
             for(int j=i ; j<=arr.length -1 ; j++ ){
                 
                 sum += arr[j] ;
                 if(sum ==0){
                     maxlen = Math.max(maxlen, j-i+1);
                 }
             }}
             
             return maxlen ;
        
            }}



Better

class Solution {
    int maxLen(int arr[]) {
        
      int sum =0;
      int maxlen =  0 ;
      
      Map<Integer, Integer> mpp = new HashMap<> ();
      
      for(int i=0 ; i<=arr.length-1 ; i++){
          
          sum += arr[i];
          
          if(sum ==0){
              maxlen = Math.max(maxlen, i+1);
          }
          
          int rem = sum;
          
          if(mpp.containsKey(rem)){
              maxlen = Math.max(maxlen, i- mpp.get(rem));
          }
          
          if(!mpp.containsKey(sum)){
              mpp.put(sum,i) ;
          }
          
      }
      return maxlen ;
        
            }}

