Count Inversion

Given an array of integers arr[]. Find the Inversion Count in the array.
Two elements arr[i] and arr[j] form an inversion if arr[i] > arr[j] and i < j.

Inversion Count: For an array, inversion count indicates how far (or close) the array is from being sorted. 
If the array is already sorted then the inversion count is 0.
If an array is sorted in the reverse order then the inversion count is the maximum. 


Brute


class Solution {
    // Function to count inversions in the array.
    static int inversionCount(int arr[]) {
       
       int count =0;
        for(int i=0 ; i<=arr.length -1 ; i++){
        for(int j=i+1 ; j<=arr.length -1 ; j++){
            
            if(arr[i]>arr[j]){
                count ++ ;
            }    
            
        }
        }
       return count ;
              
    }
}


Optimal


class Solution {
   
   private static int merge(int[] arr, int low, int mid, int high) {
        ArrayList<Integer> temp = new ArrayList<>(); 
        int left = low;      
        int right = mid + 1;   

        int cnt = 0;

        while (left <= mid && right <= high) {
            if (arr[left] <= arr[right]) {
                temp.add(arr[left]);
                left++;
            } else {
                temp.add(arr[right]);
                cnt += (mid - left + 1); 
                right++;
            }
        }

        while (left <= mid) {
            temp.add(arr[left]);
            left++;
        }

        while (right <= high) {
            temp.add(arr[right]);
            right++;
        }

        for (int i = low; i <= high; i++) {
            arr[i] = temp.get(i - low);
        }
        return cnt; 
    }

    private static int mergeSort(int[] arr, int low, int high) {
        int cnt = 0;
        if (low >= high) return cnt;
        int mid = (low + high) / 2 ;
        cnt += mergeSort(arr, low, mid);  
        cnt += mergeSort(arr, mid + 1, high); 
        cnt += merge(arr, low, mid, high);   
        return cnt;
    }
   
    static int inversionCount(int arr[]) {
    return mergeSort(arr,0,arr.length-1);
    }
      
}
