15. 3Sum

Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, 
and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.


Brute

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {

Set<List<Integer>> st = new HashSet <>();

for(int i=0 ; i<=nums.length -1 ; i++){
for(int j=i+1  ; j<=nums.length -1 ; j++){
for(int k=j+1 ; k<=nums.length -1 ; k++){

if(nums[i] + nums[j] + nums[k] == 0){
List<Integer> temp = Arrays.asList(nums[i],nums[j], nums[k]);
temp.sort(null);
st.add(temp);
}

}
}
}

List<List<Integer>> ans  = new ArrayList<>(st);
return ans ;


    }
}

