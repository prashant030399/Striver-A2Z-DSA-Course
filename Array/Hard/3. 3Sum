15. 3Sum

Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, 
and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.


Brute

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {

Set<List<Integer>> st = new HashSet <>();

for(int i=0 ; i<=nums.length -1 ; i++){
for(int j=i+1  ; j<=nums.length -1 ; j++){
for(int k=j+1 ; k<=nums.length -1 ; k++){

if(nums[i] + nums[j] + nums[k] == 0){
List<Integer> temp = Arrays.asList(nums[i],nums[j], nums[k]);
temp.sort(null);
st.add(temp);
}

}
}
}

List<List<Integer>> ans  = new ArrayList<>(st);
return ans ;


    }
}


Better


class Solution {
    public List<List<Integer>> threeSum(int[] nums) {

Set<List<Integer>> st = new HashSet<>();

for(int i=0 ; i<=nums.length -1 ; i++){
Map<Integer,Integer> mpp = new HashMap <>();

for(int j=i+1  ; j<=nums.length -1 ; j++){

int moreNeeded = - (nums[i] + nums[j]);

if(mpp.containsKey(moreNeeded)){
    List<Integer> temp = Arrays.asList(nums[i], nums[j],moreNeeded);
  temp.sort(null);
  st.add(temp) ;    
}
mpp.put(nums[j],j);

}}

List<List<Integer>> ans = new ArrayList<>(st);
return ans ; 

    }
}


Optimal


class Solution {
    public List<List<Integer>> threeSum(int[] nums) {

List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(nums);

for(int i=0 ;i<=nums.length-1 ; i++){

if(i != 0 && nums[i] == nums[i-1]) continue ;

    int j = i+1;
     int k  = nums.length -1 ;
      while(j<k){
        int sum = nums[i] + nums[j] + nums[k];
        if(sum == 0){
    List<Integer> temp = Arrays.asList(nums[i], nums[j],nums[k]);
  ans.add(temp) ; 
  j++;
  k-- ;
  
  //skip the duplicates
  while(j<k && nums[j] == nums[j-1]) j++ ;
while(j<k && nums[k] == nums[k+1]) k-- ;
        }
        else if (sum <0) j++ ;
else k-- ;

      }
} 

return ans ; 

    }}


