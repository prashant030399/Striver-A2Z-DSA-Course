
56.Merge Intervals

Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.


Brute

class Solution {
    public int[][] merge(int[][] intervals) {

Arrays.sort(intervals, (a,b) -> a[0] - b[0] );

List<int[]> ans = new ArrayList<>();

for(int i=0 ; i<=intervals.length-1 ; i++){
    int start = intervals[i][0];
    int end = intervals[i][1];

if(!ans.isEmpty() && end <= ans.get(ans.size()-1)[1]){
 continue ;   
}

for(int j= i+1 ; j<=intervals.length-1 ; j++){

    if(end >= intervals[j][0]){
        end = Math.max(end, intervals[j][1]);
    }
    else{
        break ;
    }

}
ans.add(new int []{start,end});
}

return ans.toArray(new int[0][]) ;

    }
}


Optimal

class Solution {
    public int[][] merge(int[][] intervals) {

Arrays.sort(intervals, (a,b) -> a[0] - b[0] );

List<int[]> ans = new ArrayList<>();

for(int i=0 ; i<=intervals.length-1 ; i++){
   
if(ans.isEmpty() || intervals[i][0] > ans.get(ans.size()-1)[1]){
ans.add(new int []{intervals[i][0],intervals[i][1]}); 
}

else
{
    ans.get(ans.size()-1)[1] = Math.max(ans.get(ans.size()-1)[1], intervals[i][1]);
}
}

return ans.toArray(new int[ans.size()][]) ;
    }
}
