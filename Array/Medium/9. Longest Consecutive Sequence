128. Longest Consecutive Sequence
Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.
You must write an algorithm that runs in O(n) time.


Brute force Solution


class Solution {
    public int longestConsecutive(int[] nums) {

int longest = 0;
     
        // Iterate through each element in the array
        for (int i = 0; i < nums.length; i++) {
            int currentNum = nums[i];
            int count = 1;

            // Check for consecutive elements
            while (linearSearch(nums, currentNum + 1)== true) {
                currentNum += 1;
                count ++;
            }

            // Update the longest sequence
            longest = Math.max(longest, count);
        }

        return longest;
    }

    // Helper method for linear search
    public static boolean linearSearch(int[] nums, int target) {
        for (int i=0; i<=nums.length -1 ; i++) {
            if (nums[i] == target) {
                return true;
            }
        }
        return false;

    }
}



Better Solution

class Solution {
    public int longestConsecutive(int[] nums) {

        int n= nums.length ;

Arrays.sort(nums);
        int lastSmaller = Integer.MIN_VALUE;
        int cnt = 0;
        int longest = 0;

        //find longest sequence:
        for (int i = 0; i < n; i++) {
            if (nums[i] - 1 == lastSmaller) {
                //a[i] is the next element of the
                //current sequence.
                cnt += 1;
                lastSmaller = nums[i];
            } else if (nums[i] != lastSmaller) {
                cnt = 1;
                lastSmaller = nums[i];
            }
            longest = Math.max(longest, cnt);
        }
        return longest;


    }
}



