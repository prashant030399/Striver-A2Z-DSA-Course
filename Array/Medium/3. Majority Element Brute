169. Majority Element
Given an array nums of size n, return the majority element.
The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.


Brute

class Solution {
    public int majorityElement(int[] nums) {
        
for(int i=0 ; i<=nums.length -1 ; i++){
int count =0 ; 
  
  for(int j=0 ;  j<=nums.length -1 ; j++ ){

if(nums[i] == nums[j]){
    count ++ ;
}
  }

if(count > nums.length /2) return nums [i];

}

return -1;

    }
}


Better

class Solution {
    public int majorityElement(int[] nums) {

Map<Integer,Integer> mpp = new HashMap<>();

for(int i=0 ; i<=nums.length -1 ; i++){
    mpp.put(nums[i], mpp.getOrDefault(nums[i],0) + 1 );
}

for(Map.Entry<Integer,Integer> e : mpp.entrySet()){

if(e.getValue() > nums.length/2) return e.getKey();

}

return -1 ;
    }
}


Optimal

class Solution {
    public int majorityElement(int[] nums) {

int n = nums.length ;
int cnt = 0; // count
        int el = 0; // Element

        //applying the algorithm:
        for (int i = 0; i < n; i++) {
            if (cnt == 0) {
                cnt = 1;
                el = nums[i];
            } else if (el == nums[i]) cnt++;
            else cnt--;
        }

        //checking if the stored element
        // is the majority element:
        int cnt1 = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == el) cnt1++;
        }

        if (cnt1 > (n / 2)) return el;
        return -1;  


    }
}



