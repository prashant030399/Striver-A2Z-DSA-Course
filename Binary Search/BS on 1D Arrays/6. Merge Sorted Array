
88. Merge Sorted Array


Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.
If target is not found in the array, return [-1, -1].
You must write an algorithm with O(log n) runtime complexity.


class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] ans = new int[2];
        ans[0] = lowerBound(nums, target);      
        ans[1] = upperBound(nums, target) - 1;

       
        if (ans[0] > ans[1] || ans[0] >= nums.length || nums[ans[0]] != target) {
            return new int[]{-1, -1};
        }
        return ans;
    }

    private int lowerBound(int[] nums, int target) {
        int low = 0, high = nums.length - 1, result = nums.length;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (nums[mid] >= target) {
                result = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return result;
    }

    private int upperBound(int[] nums, int target) {
        int low = 0, high = nums.length - 1, result = nums.length;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (nums[mid] > target) {
                result = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return result;
    }
}
